{"version":3,"sources":["components/Wrapper.js","components/Scores.js","components/Jumbotron.js","components/Images.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","className","children","Scores","score","topScore","Jumbotron","class","Images","src","image","alt","name","value","onClick","handleClick","id","App","state","images","currentScore","targetScore","clickedValues","shuffle","arr","i","j","temp","length","Math","floor","random","imagesCopy","shuffleImages","copyClickedValues","console","log","includes","gameChanger","push","setState","forEach","count","this","map","picture","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+9/GAaeA,MAXf,SAAiBC,GACf,OACE,yBAAKC,UAAU,OACd,yBAAKA,UAAU,UACd,yBAAKA,UAAU,UACb,yBAAKA,UAAU,WAAWD,EAAME,a,eCIzBC,MATf,SAAiBH,GACb,OACI,yBAAKC,UAAY,gBACjB,uCAAaD,EAAMI,MAAnB,KACA,2CAAiBJ,EAAMK,SAAvB,OCOOC,MAXf,SAAmBN,GACf,OACI,yBAAKC,UAAU,6BAEX,wBAAIM,MAAM,aAAV,gBACA,kEACA,yECOGC,MAbf,SAAgBR,GACZ,OACI,yBAAKC,UAAU,QACX,yBAAKA,UAAU,eACXQ,IAAKT,EAAMU,MACXC,IAAKX,EAAMY,KACXC,MAAOb,EAAMa,MACbC,QAAS,kBAAMd,EAAMe,YAAYf,EAAMgB,SC2GxCC,E,2MA3GbC,MAAQ,CACNC,SACAC,aAAc,EACdC,YAAa,EACbC,cAAe,I,EAOjBC,QAAU,SAACC,GACT,IAAIC,EACFC,EACAC,EACF,IAAKF,EAAID,EAAII,OAAS,EAAGH,EAAI,EAAGA,IAC9BC,EAAIG,KAAKC,MAAMD,KAAKE,UAAYN,EAAI,IACpCE,EAAOH,EAAIC,GACXD,EAAIC,GAAKD,EAAIE,GACbF,EAAIE,GAAKC,EAEX,OAAOH,G,EAMTT,YAAc,SAACC,GAIb,IAAMgB,EAAU,YAAO,EAAKd,MAAMC,QAC5Bc,EAAgB,EAAKV,QAAQS,GAC/BE,EAAiB,YAAO,EAAKhB,MAAMI,eACvCa,QAAQC,IAAIF,GAGRA,EAAkBG,SAASrB,IAE7BmB,QAAQC,IAAI,2BACZ,EAAKE,gBAMLJ,EAAkBK,KAAKvB,GACvB,EAAKwB,SAAS,CACZpB,aAAc,EAAKF,MAAME,aAAe,EACxCE,cAAeY,EACff,OAAQc,M,EAMdK,YAAc,WACZ,IAAMN,EAAU,YAAO,EAAKd,MAAMC,QAC5Bc,EAAgB,EAAKV,QAAQS,GAGnCG,QAAQC,IAAI,EAAKlB,MAAME,aAAe,SACtCe,QAAQC,IAAI,EAAKlB,MAAMG,YAAc,eAGjC,EAAKH,MAAME,aAAe,EAAKF,MAAMG,aACvC,EAAKmB,SAAS,CAAEnB,YAAa,EAAKH,MAAME,eAI1C,EAAKF,MAAMC,OAAOsB,QAAQ,SAAA/B,GACxBA,EAAMgC,MAAQ,IAIhB,EAAKF,SAAS,CACZpB,aAAc,EACdD,OAAQc,K,wEAIF,IAAD,OACP,OACE,yBAAKhC,UAAU,OACb,kBAAC,EAAD,CAAQG,MAAOuC,KAAKzB,MAAME,aACxBf,SAAUsC,KAAKzB,MAAMG,cACvB,kBAAC,EAAD,MACA,kBAAC,EAAD,KACGsB,KAAKzB,MAAMC,OAAOyB,IAAI,SAAAzB,GAAM,OAC3B,kBAAC,EAAD,CACElB,UAAU,SACVS,MAAOS,EAAO0B,QACdjC,KAAMO,EAAOP,KACbI,GAAIG,EAAOH,GACX8B,IAAK3B,EAAOH,GACZD,YAAc,EAAKA,sB,GAhGfgC,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.07f49dce.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Wrapper(props) {\n  return (\n    <div className=\"row\">\n     <div className=\"col-1\"></div>\n      <div className=\"col-10\">\n        <div className=\"wrapper\">{props.children}</div>\n      </div>\n    </div>\n  );\n}\n\nexport default Wrapper;","import React from \"react\";\n\nfunction Scores (props){\n    return (\n        <div className = \"scoreCounter\">\n        <h2> Score: {props.score} </h2>\n        <h2> Top Score: {props.topScore} </h2>\n        </div>\n    )\n}\n\nexport default Scores;\n","import React from \"react\";\n\nfunction Jumbotron(props) {\n    return (\n        <div className=\"jumbotron jumbotron-fluid\">\n            \n            <h1 class=\"display-4\"> Clicky Game</h1>\n            <h3> Click on an image to earn points </h3>\n            <h3>but don't click on any more than once! </h3>\n        </div>\n    )\n}\n\nexport default Jumbotron;","import React from \"react\";\n\nfunction Images(props) {\n    return (\n        <div className=\"card\">\n            <img className=\"card-img-top\"\n                src={props.image}\n                alt={props.name}\n                value={props.value}\n                onClick={() => props.handleClick(props.id)}\n            />\n        </div>\n    )\n}\n\nexport default Images","import React, { Component } from 'react';\nimport Wrapper from './components/Wrapper';\nimport './App.css';\nimport images from './images.json';\nimport Scores from './components/Scores';\nimport Jumbotron from './components/Jumbotron';\nimport Images from './components/Images'\n\nclass App extends Component {\n  state = {\n    images,\n    currentScore: 0,\n    targetScore: 0,\n    clickedValues: [],\n\n  }\n\n\n  // added shuffle function - recommeded from lindsay to google \n\n  shuffle = (arr) => {\n    var i,\n      j,\n      temp;\n    for (i = arr.length - 1; i > 0; i--) {\n      j = Math.floor(Math.random() * (i + 1));\n      temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n    }\n    return arr;\n  };\n\n\n  // clickCount = (id) => {\n\n  handleClick = (id) => {\n\n    // make a copy of the array of images \n    // shuffle the images of the copy of the array \n    const imagesCopy = [...this.state.images];\n    const shuffleImages = this.shuffle(imagesCopy);\n    let copyClickedValues = [...this.state.clickedValues];\n    console.log(copyClickedValues);\n\n    // if the copy of the array includes the id for the images.json the game will end \n    if (copyClickedValues.includes(id)) {\n      // if(this.state.clickedValues.includes(id)){\n      console.log(\"you clicked on this ima\")\n      this.gameChanger();\n\n      // else push the id to set to the state of the score/cuurentScore \n      // make another copy of the values that were clicked\n      // then have the images shuffle \n    } else {\n      copyClickedValues.push(id);\n      this.setState({\n        currentScore: this.state.currentScore + 1,\n        clickedValues: copyClickedValues,\n        images: shuffleImages\n\n      });\n    }\n  }\n\n  gameChanger = () => {\n    const imagesCopy = [...this.state.images];\n    const shuffleImages = this.shuffle(imagesCopy);\n\n    \n    console.log(this.state.currentScore + \"score\")\n    console.log(this.state.targetScore + \"targetscore\");\n    // if the currentscore is less than the targetscore \n    // set the score to currentScore / the number of times the image was clicked \n    if (this.state.currentScore > this.state.targetScore) {\n      this.setState({ targetScore: this.state.currentScore })\n\n    }\n\n    this.state.images.forEach(image => {\n      image.count = 0;\n\n    });\n\n    this.setState({\n      currentScore: 0,\n      images: shuffleImages\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Scores score={this.state.currentScore}\n          topScore={this.state.targetScore} />\n        <Jumbotron />\n        <Wrapper>\n          {this.state.images.map(images => (\n            <Images\n              className=\"images\"\n              image={images.picture}\n              name={images.name}\n              id={images.id}\n              key={images.id}\n              handleClick= {this.handleClick}\n\n            />\n\n          ))}\n        </Wrapper>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}